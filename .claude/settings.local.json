{
  "permissions": {
    "allow": [
      "Bash(node scripts/lp-harmony-ai.mjs)",
      "Bash(node scripts/lp-harmony-ai.mjs batch1)",
      "Bash(node scripts/lp-harmony-ai.mjs batch2)",
      "Bash(node scripts/lp-harmony-ai.mjs batch3)",
      "Bash(node scripts/lp-harmony-ai.mjs batch4)",
      "Bash(node scripts/lp-harmony-ai.mjs batch5)",
      "Bash(node scripts/lp-harmony-ai.mjs analyze stakeholder_management)",
      "Bash(node -e \"const mapping = {}; mapping[''stakeholder_management''] = {''1'': {options: [{caseId: ''test'', score: 85}]}}; console.log(JSON.stringify(mapping, null, 2))\")",
      "Read(//d//**)",
      "Bash(node -e \"\nconst content = ''test\\n};\\n\\nexport default questionsToCasesMapping;\\n'';\nconst regex = /\\n\\};(\\n\\nexport default questionsToCasesMapping;)?$/;\nconsole.log(''Match:'', regex.test(content));\nconsole.log(''Replace:'', content.replace(regex, '',\\n  \"\"stakeholder_management\"\": {}\\n};$1''));\n\")",
      "Bash(for batch in batch1 batch2 batch3 batch4 batch5)",
      "Bash(do echo \"=== $batch ===\")",
      "Bash(node scripts/lp-harmony-ai.mjs $batch)",
      "Bash(done)",
      "Bash(node -c src/data/questionsToCasesMapping.js)",
      "Bash(node scripts/generate-coverage-report.mjs)",
      "Bash(npm run lint)",
      "Bash(npm test)",
      "Bash(git add -A)",
      "Bash(git commit -m \"feat: Organize LP Harmony AI files and complete clean-up for v4.0 pre-looping\n\n- Organized LP Harmony AI files into structured folders:\n  - 1 - code and scripts: Main executable scripts\n  - 2 - analysis and results: Cache, prompts, and semantic analyses\n  - 3 - final reports: Coverage reports and executive summaries\n\n- Removed obsolete files and folders:\n  - Deleted case-review, reports, new-cases-rules folders\n  - Removed deprecated Python and JS scripts\n  - Cleaned up temporary files and old verification scripts\n\n- Coverage achievements:\n  - 100% question coverage (179/179 questions)\n  - 737 total mappings across 14 Leadership Principles\n  - 4.1 average cases per question\n\n- Tests: All 51 tests passing\n- Lint: 23 warnings (acceptable for production)\n\nThis commit creates the v4.0 pre-looping baseline\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git tag -a v4.0-pre-looping -m \"Version 4.0 Pre-Looping Baseline\n\nüéØ Major Achievements:\n- 100% question coverage (179/179 questions mapped)\n- 14 Leadership Principles fully analyzed via LP Harmony AI\n- 737 semantic mappings with AI-powered scoring\n- Complete clean-up and organization\n\nüì¶ LP Harmony AI System:\n- AI-powered semantic analysis using Claude\n- Automated question-to-case mapping\n- Comprehensive coverage reports\n- Reusable scripts for future LPs\n\n‚úÖ Quality Metrics:\n- All 51 tests passing\n- Lint: 23 warnings (non-blocking)\n- Average 4.1 cases per question\n- 123.1% case utilization rate\n\nüìÅ Project Structure:\n- Clean and organized codebase\n- LP Harmony AI files properly archived\n- All obsolete tools and reports removed\n- Ready for looping feature implementation\n\nüîÑ Next Phase: Looping System\nThis version serves as the stable baseline before implementing\nthe looping/rotation feature for case practice.\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git add V4.0_PRE_LOOPING_SUMMARY.md)",
      "Bash(git commit -m \"docs: Add v4.0 pre-looping summary report\n\nAdded comprehensive summary document detailing:\n- Project achievements and metrics\n- Clean-up activities performed  \n- Quality assurance results\n- Next phase roadmap\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git add README.md)",
      "Bash(git commit -m \"docs: Update README to be more succinct for v4.0\n\nSimplified README with focus on key metrics:\n- 100% question coverage (179 questions)\n- 737 AI-powered mappings\n- 51 passing tests\n- Removed verbose sections\n- Added AI system reference\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(node -e \"\nconst lps = [''customer_obsession'', ''program_management'', ''ownership'', ''dive_deep'', ''invent_and_simplify'', ''earn_trust'', ''deliver_results'', ''stakeholder_management'', ''learn_and_be_curious'', ''bias_for_action'', ''prioritizing_and_influence'', ''deal_with_ambiguity'', ''disagree_and_commit'', ''insist_on_highest_standards''];\n\nconst fs = require(''fs'');\nconst path = require(''path'');\n\nconst mappingContent = fs.readFileSync(''src/data/questionsToCasesMapping.js'', ''utf-8'');\nconst match = mappingContent.match(/export\\s+const\\s+questionsToCasesMapping\\s*=\\s*(\\{[\\s\\S]*?\\n\\};)/);\nconst mapping = eval(''('' + match[1].replace(/\\};$/, ''}'') + '')'');\n\nlet topCaseCount = 0;\nlet goodCaseCount = 0;\nlet acceptableCount = 0;\n\nfor (const lpId of lps) {\n  const lpMapping = mapping[lpId];\n  if (!lpMapping) continue;\n  \n  for (const qData of Object.values(lpMapping)) {\n    if (!qData.options) continue;\n    \n    for (const opt of qData.options) {\n      if (opt.score >= 95) topCaseCount++;\n      else if (opt.score >= 90) goodCaseCount++;\n      else if (opt.score >= 80) acceptableCount++;\n    }\n  }\n}\n\nconsole.log(''TopCase (95-100):'', topCaseCount);\nconsole.log(''GoodCase (90-94):'', goodCaseCount);\nconsole.log(''Acceptable (80-89):'', acceptableCount);\nconsole.log(''Total:'', topCaseCount + goodCaseCount + acceptableCount);\n\")",
      "Bash(git commit -m \"fix: Correct score distribution metrics in reports\n\nCorrected TopCase count based on actual data analysis:\n- TopCase (95-100): 2 mappings (1 unique case: long-term-tradeoff)\n- GoodCase (90-94): 84 mappings (11%)\n- Acceptable (80-89): 651 mappings (88%)\n\nThe case ''long-term-tradeoff'' (Ownership) achieved score 95 on Q3 and Q5.\n\nPrevious reports incorrectly stated 0 TopCases.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(npm run build)",
      "Bash(gh pr close:*)",
      "Bash(gh workflow:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(python apply_dark_mode.py:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Implementar Dark Mode completo e profissional\n\nMelhorias implementadas:\n- Adicionado scrollbar customizada para dark mode\n- Suporte dark mode em todos os dropdowns de busca\n- Mobile drawer com suporte dark mode completo\n- Sidebar com t√≠tulo escuro\n- Transi√ß√µes suaves entre temas\n- Paleta de cores consistente (slate-900, slate-800, slate-700)\n\nComponentes atualizados:\n- src/index.css: Scrollbar customizada e transi√ß√µes\n- src/App.jsx: Mobile drawer com dark mode\n- src/components/layout/Header.jsx: Dropdowns com dark mode\n- src/components/layout/Sidebar.jsx: T√≠tulo com dark mode\n\nTodos os elementos agora suportam modo claro e escuro\ncom contraste adequado e UX consistente.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(npm run deploy:*)",
      "Bash(pkill:*)",
      "Bash(python fix_dark_mode_contrast.py:*)"
    ],
    "deny": [],
    "ask": []
  }
}
