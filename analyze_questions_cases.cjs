const fs = require('fs');
const path = require('path');

// Mapeamento de perguntas (do CSV fornecido)
const questions = {
  'INVENT AND SIMPLIFY': [
    'Conte sobre uma inova√ß√£o que voc√™ implementou que simplificou um processo (que era complexo)?',
    'Me fale sobre uma solu√ß√£o criativa que voc√™ desenvolveu',
    'Como voc√™ simplifica processos complexos?',
    'Descreva uma situa√ß√£o onde voc√™ desafiou o status quo',
    'Me fale sobre uma vez que voc√™ criou um processo mais simples que teve grande impacto',
    'Conte sobre quando voc√™ teve um plano mas encontrou obst√°culos - como voc√™ pivotou?',
    'Descreva uma situa√ß√£o onde voc√™ equilibrou inova√ß√£o com risco',
    'Como voc√™ decidiu entre construir uma solu√ß√£o pr√≥pria vs. adaptar algo existente?',
    'Me d√™ um exemplo de quando voc√™ usou tecnologia/ferramenta de forma n√£o-convencional para resolver um problema',
    'Conte sobre um processo de payment operations que voc√™ automatizou ou otimizou'
  ],
  'OWNERSHIP': [
    'Nos conte uma situa√ß√£o onde voc√™ assumiu responsabilidade al√©m do seu escopo de trabalho e √°rea de conhecimento - como lidou com isso, equilibrando as tarefas atuais/normais com essas outras (novas)?',
    'Me d√™ um exemplo de quando voc√™ foi al√©m da sua fun√ß√£o',
    'Conte sobre uma decis√£o de longo prazo que voc√™ tomou',
    'Como voc√™ age quando algo n√£o √© sua responsabilidade?',
    'Me fale sobre um trade-off dif√≠cil que voc√™ fez pensando no longo prazo',
    'Descreva uma situa√ß√£o onde voc√™ tomou uma decis√£o importante de neg√≥cio sem consultar seu gestor',
    'Me fale sobre quando voc√™ identificou uma inefici√™ncia e tomou ownership para melhorar',
    'Como voc√™ lida com situa√ß√µes onde precisa assumir responsabilidade por erros?',
    'Descreva um projeto que voc√™ liderou do in√≠cio ao fim - como garantiu o sucesso?',
    'Descreva quando voc√™ criou um mecanismo para prevenir problemas recorrentes em pagamentos'
  ],
  'DIVE DEEP': [
    'Conte uma situa√ß√£o onde voc√™ precisou entender a causa raiz para resolver um problema complexo',
    'Me fale sobre quando voc√™ teve que investigar um problema complexo',
    'Como voc√™ garante qualidade nos detalhes?',
    'Descreva uma situa√ß√£o onde dados superficiais n√£o eram suficientes',
    'Conte sobre o problema mais complicado que voc√™ teve que lidar - como voc√™ investigou?',
    'Me d√™ um exemplo de quando voc√™ usou dados em profundidade para desenvolver uma solu√ß√£o',
    'Descreva uma vez que algu√©m te deu uma explica√ß√£o mas voc√™ n√£o acreditou e investigou - qual foi a verdade?',
    'Como voc√™ usa "5 Whys" ou an√°lise de causa raiz para chegar ao fundo de problemas?',
    'Conte sobre quando m√©tricas e anedotas diferiam - como voc√™ descobriu a verdade?',
    'Conte sobre uma vez que voc√™ identificou um padr√£o de fraude ou risco que outros n√£o viram'
  ]
  // Adicionar mais LPs conforme necess√°rio
};

// Fun√ß√£o para ler todos os cases de uma pasta LP
function readLPCases(lpFolder) {
  const lpPath = path.join('src/data', lpFolder);
  const cases = [];
  
  try {
    const files = fs.readdirSync(lpPath);
    files.forEach(file => {
      if (file.endsWith('.js') && !file.includes('index')) {
        const filePath = path.join(lpPath, file);
        const content = fs.readFileSync(filePath, 'utf8');
        
        // Extrair informa√ß√µes do case
        const idMatch = content.match(/id:\s*["']([^"']+)["']/);
        const titleMatch = content.match(/title_pt:\s*["']([^"']+)["']/);
        const companyMatch = content.match(/company:\s*["']([^"']+)["']/);
        const periodMatch = content.match(/period:\s*["']([^"']+)["']/);
        
        // Extrair STAR(L) completo
        const ptMatch = content.match(/pt:\s*{([^}]+s:\s*`([^`]+)`[^}]+t:\s*`([^`]+)`[^}]+a:\s*`([^`]+)`[^}]+r:\s*`([^`]+)`[^}]+l:\s*`([^`]+)`)/s);
        
        if (idMatch && titleMatch) {
          cases.push({
            file: file,
            id: idMatch[1],
            title: titleMatch[1],
            company: companyMatch ? companyMatch[1] : 'N/A',
            period: periodMatch ? periodMatch[1] : 'N/A',
            situation: ptMatch ? ptMatch[2].substring(0, 200) : '',
            task: ptMatch ? ptMatch[3].substring(0, 200) : '',
            action: ptMatch ? ptMatch[4].substring(0, 300) : '',
            result: ptMatch ? ptMatch[5].substring(0, 200) : '',
            learning: ptMatch ? ptMatch[6].substring(0, 200) : ''
          });
        }
      }
    });
  } catch (err) {
    console.error(`Erro ao ler pasta ${lpFolder}:`, err.message);
  }
  
  return cases;
}

// Fun√ß√£o para analisar match entre pergunta e case
function analyzeMatch(question, caseData) {
  const questionLower = question.toLowerCase();
  const fullText = `${caseData.title} ${caseData.situation} ${caseData.task} ${caseData.action} ${caseData.result} ${caseData.learning}`.toLowerCase();
  
  let score = 0;
  let reasons = [];
  
  // Keywords importantes por tipo de pergunta
  const keywords = {
    'inova√ß√£o': ['inova√ß√£o', 'invent', 'criou', 'cria√ß√£o', 'novo', 'nova'],
    'simplific': ['simplific', 'otimiz', 'automati', 'reduzi', 'eficiente'],
    'processo': ['processo', 'fluxo', 'workflow', 'procedimento'],
    'ownership': ['assumi', 'responsabilidade', 'owner', 'liderei'],
    'al√©m': ['al√©m', 'extra', 'adicional', 'mais'],
    'investigar': ['investigar', 'analis', 'causa raiz', 'profund', 'detalhe'],
    'dados': ['dados', 'm√©tricas', 'n√∫meros', 'an√°lise'],
    'decis√£o': ['decis√£o', 'escolha', 'optei', 'decidi']
  };
  
  // Verificar presen√ßa de keywords
  Object.entries(keywords).forEach(([key, terms]) => {
    if (questionLower.includes(key)) {
      terms.forEach(term => {
        if (fullText.includes(term)) {
          score += 2;
          reasons.push(`Cont√©m termo relacionado: ${term}`);
        }
      });
    }
  });
  
  return { score, reasons };
}

// Processar todas as LPs
const lpFolders = [
  'invent_and_simplify',
  'ownership', 
  'dive_deep',
  'deliver_results',
  'earn_trust',
  'customer_obsession',
  'learn_and_be_curious',
  'insist_on_highest_standards',
  'are_right_a_lot',
  'bias_for_action',
  'think_big',
  'disagree_and_commit',
  'hire_and_develop_the_best',
  'frugality',
  'best_employer',
  'broad_responsibility'
];

console.log('üîç INICIANDO AN√ÅLISE PROFUNDA DE CASES...\n');

lpFolders.forEach(lpFolder => {
  console.log(`\nüìÅ Analisando: ${lpFolder}`);
  const cases = readLPCases(lpFolder);
  console.log(`   Encontrados ${cases.length} cases`);
  cases.forEach(c => {
    console.log(`   - ${c.id}: ${c.title.substring(0, 60)}...`);
  });
});

console.log('\n‚úÖ An√°lise conclu√≠da!');
